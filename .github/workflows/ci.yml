name: Build

on:
    pull_request:
    push:
        branches: [main]
        tags: ["*"]


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ['3.9', '3.10', '3.11', '3.12']

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              run: curl -LsSf https://astral.sh/uv/install.sh | sh

            - name: Install & activate
              run: |
                uv sync --python ${{ matrix.python-version }}
                . .venv/bin/activate
                echo PATH=$PATH >> $GITHUB_ENV

            - name: Test
              run: python -m unittest discover tests

            - name: Test with oldest-supported-numpy
              run: |
                uv pip install oldest-supported-numpy 
                python -m unittest discover tests

    build_wheels:
        name: Build wheel for ${{ matrix.os }}-${{ matrix.build }}${{ matrix.python }}-${{ matrix.arch }}
        runs-on: ${{ matrix.os }}
        strategy:
            # Ensure that a wheel builder finishes even if another fails
            fail-fast: false
            matrix:
                os: [windows-latest, ubuntu-latest, macos-latest]
                python: [39, 310, 311, 312]
                arch: [auto64, auto32, universal2]
                build: ["cp"]
                exclude:
                    - os: ubuntu-latest
                      arch: universal2
                    - os: windows-latest
                      arch: universal2
                    - os: macos-latest
                      arch: auto32
        steps:
            - name: Checkout mt2
              uses: actions/checkout@v4

            # Needed within cibuildwheel
            - name: Install uv
              run: curl -LsSf https://astral.sh/uv/install.sh | sh

            - uses: pypa/cibuildwheel@v2.20.0
              env:
                CIBW_BUILD_FRONTEND: "build[uv]"
                CIBW_BUILD: "${{ matrix.build }}${{ matrix.python }}*"
                CIBW_ARCHS: ${{ matrix.arch }}
                CIBW_TEST_COMMAND: python -m unittest discover -t {project} -s {project}/tests

            - uses: actions/upload-artifact@v4
              with:
                  name: "artifact-${{ matrix.os }}-${{ matrix.build }}-${{ matrix.python }}-${{ matrix.arch }}"
                  path: ./wheelhouse/*.whl

    build_sdist:
        name: Build source distribution
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              run: curl -LsSf https://astral.sh/uv/install.sh | sh

            - name: Install environment & setuptools
              run: |
                uv sync
                uv pip install setuptools

            - name: Build sdist
              run: uv run python setup.py sdist

            - uses: actions/upload-artifact@v4
              with:
                  name: artifact-source
                  path: dist/*.tar.gz

    pass:
      needs: [test, build_wheels, build_sdist]
      runs-on: ubuntu-latest
      steps:
        - run: echo "All jobs passed"

    upload_pypi:
        needs: [pass]
        runs-on: ubuntu-latest
        # upload to PyPI on every tag starting with 'v'
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        # alternatively, to publish when a GitHub Release is created, use the following rule:
        # if: github.event_name == 'release' && github.event.action == 'published'
        steps:
            - uses: actions/download-artifact@v4
              with:
                  path: dist
                  merge-multiple: true

            - uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  password: ${{ secrets.PYPI_API_TOKEN }}
                  # To test: repository_url: https://test.pypi.org/legacy/
